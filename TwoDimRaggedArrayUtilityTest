/**
 * Stephanie
 */
import static org.junit.Assert.*;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class TwoDimRaggedArrayUtilityTestPublic {
	private double[][] dataSet1 = {{6,4,9},{4,5},{7}};
	private double[][] dataSet2 = {{7,2,9,4},{5},{8,1,3},{11,6,7,2}};
	private double[][] dataSet3 = {{10,5,3}, {3,2,8},{4,-5,3,-6}};

	private File inputFile, outputFile;

	@Before
	public void setUp() throws Exception {
		outputFile = new File("TestOut.txt");
	}

	@After
	public void tearDown() throws Exception {
		dataSet1 = dataSet2 = dataSet3 =  null;
		inputFile = outputFile = null;
	}

	/**
	 * Test getTotal method Returns the total of all the elements in the two
	 * dimensional array
	 */
	@Test
	public void testGetTotal() {
		assertEquals(35.0, TwoDimRaggedArrayUtility.getTotal(dataSet1), .001);
		assertEquals(65.0, TwoDimRaggedArrayUtility.getTotal(dataSet2), .001);
		assertEquals(27.0, TwoDimRaggedArrayUtility.getTotal(dataSet3), .001);
		
	}

	/**
	 * Test getAverage method Returns the average of all the elements in the two
	 * dimensional array
	 */
	@Test
	public void testGetAverage() {
		assertEquals(5.8333, TwoDimRaggedArrayUtility.getAverage(dataSet1), .001);
		assertEquals(5.417, TwoDimRaggedArrayUtility.getAverage(dataSet2), .01);
		assertEquals(2.7, TwoDimRaggedArrayUtility.getAverage(dataSet3), .01);
		
		// fail("Not yet implemented");
	}

	/**
	 * Test getRowTotal method Returns the total of all the elements of the row. Row
	 * 0 refers to the first row in the two dimensional array
	 */
	@Test
	public void testGetRowTotal() {
		assertEquals(9.0, TwoDimRaggedArrayUtility.getRowTotal(dataSet1, 1), .001);
		assertEquals(5.0, TwoDimRaggedArrayUtility.getRowTotal(dataSet2, 1), .001);
		assertEquals(22.0, TwoDimRaggedArrayUtility.getRowTotal(dataSet2, 0), .001);
		assertEquals(18.0, TwoDimRaggedArrayUtility.getRowTotal(dataSet3, 0), .001);
		assertEquals(13.0, TwoDimRaggedArrayUtility.getRowTotal(dataSet3, 1), .001);
		
		// fail("Not yet implemented");
	}

	/**
	 * Test getColumnTotal method Returns the total of all the elements in the
	 * column. If a row in the two dimensional array doesn't have this column index,
	 * it is not an error, it doesn't participate in this method. Column 0 refers to
	 * the first column in the two dimensional array
	 */
	@Test
	public void testGetColumnTotal() {
		assertEquals(17.0, TwoDimRaggedArrayUtility.getColumnTotal(dataSet1, 0), .001);
		assertEquals(19.0, TwoDimRaggedArrayUtility.getColumnTotal(dataSet2, 2), .001);
		assertEquals(2.0, TwoDimRaggedArrayUtility.getColumnTotal(dataSet3, 1), .001);
		
		// fail("Not yet implemented");
	}

	/**
	 * Test getHighestInRow method Returns the largest of all the elements in the
	 * row. Row 0 refers to the first row in the two dimensional array
	 */
	@Test
	public void testGetHighestInRow() {
		assertEquals(9.0, TwoDimRaggedArrayUtility.getHighestInRow(dataSet1, 0), .001);
		assertEquals(8.0, TwoDimRaggedArrayUtility.getHighestInRow(dataSet2, 2), .001);
		assertEquals(8.0, TwoDimRaggedArrayUtility.getHighestInRow(dataSet3, 1), .001);
	
		// fail("Not yet implemented");
	}

	/**
	 * Test getHighestInRowIndex method Returns the index of the largest of all the
	 * elements in the row. Row 0 refers to the first row in the two dimensional
	 * array
	 */
	@Test
	public void testGetHighestInRowIndex() {
		assertEquals(2.0, TwoDimRaggedArrayUtility.getHighestInRowIndex(dataSet1, 0),.001);
		assertEquals(0.0, TwoDimRaggedArrayUtility.getHighestInRowIndex(dataSet2, 2),.001);
		assertEquals(2.0, TwoDimRaggedArrayUtility.getHighestInRowIndex(dataSet3, 1),.001);
		
	}

	/**
	 * Test getLowestInRowIndex method Returns the index of the smallest of all the
	 * elements in the row. Row 0 refers to the first row in the two dimensional
	 * array
	 */
	@Test
	public void testGetLowestInRowIndex() {
		assertEquals(0.0, TwoDimRaggedArrayUtility.getLowestInRowIndex(dataSet1, 1),.001);
		assertEquals(1.0, TwoDimRaggedArrayUtility.getLowestInRowIndex(dataSet2, 2),.001);
		assertEquals(2.0, TwoDimRaggedArrayUtility.getLowestInRowIndex(dataSet3, 0),.001);
		
	}

	/**
	 * Test getLowestInRow method Returns the smallest of all the elements in the
	 * row. Row 0 refers to the first row in the two dimensional array
	 */
	@Test
	public void testGetLowestInRow() {
		assertEquals(4.0, TwoDimRaggedArrayUtility.getLowestInRow(dataSet1, 1), .001);
		assertEquals(5.0, TwoDimRaggedArrayUtility.getLowestInRow(dataSet2, 1), .001);
		assertEquals(3.0, TwoDimRaggedArrayUtility.getLowestInRow(dataSet3, 0), .001);

		// fail("Not yet implemented");
	}

	/**
	 * Test getHighestInColumn method Returns the largest of all the elements in the
	 * column. If a row in the two dimensional array doesn't have this column index,
	 * it is not an error, it doesn't participate in this method. Column 0 refers to
	 * the first column in the two dimensional array
	 */
	@Test
	public void testGetHighestInColumn() {
		assertEquals(9.0, TwoDimRaggedArrayUtility.getHighestInColumn(dataSet1, 2), .001);
		assertEquals(6.0, TwoDimRaggedArrayUtility.getHighestInColumn(dataSet2, 1), .001);
		assertEquals(10.0, TwoDimRaggedArrayUtility.getHighestInColumn(dataSet3, 0), .001);

		// fail("Not yet implemented");
	}

	/**
	 * Test getHighestInColumn method Returns the index of the largest of all the
	 * elements in the column. If a row in the two dimensional array doesn't have
	 * this column index, it is not an error, it doesn't participate in this method.
	 * Column 0 refers to the first column in the two dimensional array
	 */
	@Test
	public void testGetHighestInColumnIndex() {
		assertEquals(0.0, TwoDimRaggedArrayUtility.getHighestInColumnIndex(dataSet1, 2),.001);
		assertEquals(3.0, TwoDimRaggedArrayUtility.getHighestInColumnIndex(dataSet2, 1),.001);
		assertEquals(0.0, TwoDimRaggedArrayUtility.getHighestInColumnIndex(dataSet3, 0),.001);

		// fail("Not yet implemented");
	}

	/**
	 * Test getLowestInColumn method Returns the smallest of all the elements in the
	 * column. If a row in the two dimensional array doesn't have this column index,
	 * it is not an error, it doesn't participate in this method. Column 0 refers to
	 * the first column in the two dimensional array
	 */

	@Test
	public void testGetLowestInColumn() {
		assertEquals(4.0, TwoDimRaggedArrayUtility.getLowestInColumn(dataSet1, 1), .001);
		assertEquals(3.0, TwoDimRaggedArrayUtility.getLowestInColumn(dataSet2, 2), .001);
		assertEquals(3.0, TwoDimRaggedArrayUtility.getLowestInColumn(dataSet3, 0), .001);

		// fail("Not yet implemented");
	}

	/**
	 * Test getLowestInColumnIndex method Returns the index of the smallest of all
	 * the elements in the column. If a row in the two dimensional array doesn't
	 * have this column index, it is not an error, it doesn't participate in this
	 * method. Column 0 refers to the first column in the two dimensional array
	 */

	@Test
	public void testGetLowestInColumnIndex() {
		assertEquals(0.0, TwoDimRaggedArrayUtility.getLowestInColumnIndex(dataSet1, 1),.001);
		assertEquals(2.0, TwoDimRaggedArrayUtility.getLowestInColumnIndex(dataSet2, 2),.001);
		assertEquals(1.0, TwoDimRaggedArrayUtility.getLowestInColumnIndex(dataSet3, 0),.001);

		// fail("Not yet implemented");
	}

	/**
	 * Test getHighestInArray method Returns the largest of all the elements in the
	 * two dimensional array.
	 */
	@Test
	public void testGetHighestInArray() {
		assertEquals(9.0, TwoDimRaggedArrayUtility.getHighestInArray(dataSet1), .001);
		assertEquals(11.0, TwoDimRaggedArrayUtility.getHighestInArray(dataSet2), .001);
		assertEquals(10.0, TwoDimRaggedArrayUtility.getHighestInArray(dataSet3), .001);
		
		// fail("Not yet implemented");
	}

	/**
	 * Test getLowestInArray method Returns the smallest of all the elements in the
	 * two dimensional array.
	 */
	@Test
	public void testGetLowestInArray() {
		assertEquals(4.0, TwoDimRaggedArrayUtility.getLowestInArray(dataSet1), .001);
		assertEquals(1.0, TwoDimRaggedArrayUtility.getLowestInArray(dataSet2), .001);
		assertEquals(-6.0, TwoDimRaggedArrayUtility.getLowestInArray(dataSet3), .001);

		// fail("Not yet implemented");
	}

	/**
	 * Test the writeToFile method write the array to the outputFile File then read
	 * it back to make sure formatted correctly to read
	 * 
	 */
	@Test
	public void testWriteToFile() {
		double[][] array = null;
		try {
			TwoDimRaggedArrayUtility.writeToFile(dataSet1, outputFile);
		} catch (Exception e) {
			fail("This should not have caused an Exception");
		}
		// now read from the output file
		try {
			array = TwoDimRaggedArrayUtility.readFile(outputFile);
			assertEquals(6.0, array[0][0], .001);
			assertEquals(4.0, array[0][1], .001);
			assertEquals(9.0, array[0][2], .001);
			assertEquals(4.0, array[1][0], .001);
			assertEquals(5.0, array[1][1], .001);
			assertEquals(7.0, array[2][0], .001);
		
			
		} catch (FileNotFoundException e) {
			fail("This should not have caused an Exception");
		}

	}

	/**
	 * Test the readFile method reads from a file and then test that the returned
	 * two dimensional array of doubles is ragged.
	 */
	@Test
	public void testReadFile() {
		double[][] array = null;
		try {
			inputFile = new File("Test1.txt");
			PrintWriter inFile = new PrintWriter(inputFile);
			inFile.print("6 4 9\n" + "4 5\n" + "7\n");
			inFile.close();
			array = TwoDimRaggedArrayUtility.readFile(inputFile);
			assertEquals(6.0, array[0][0], .001);
			assertEquals(4.0, array[0][1], .001);
			assertEquals(9.0, array[0][2], .001);
			assertEquals(4.0, array[1][0], .001);
			assertEquals(5.0, array[1][1], .001);
			assertEquals(7.0, array[2][0], .001);
			

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			fail("This should not have caused an FileNotFoundException");
		}

		// testing that the array is a ragged array
		try {
			assertEquals(0.0, array[1][2], .001);
			fail("This should have caused a ArrayIndexOutOfBoundsException");

		} catch (ArrayIndexOutOfBoundsException e) {

			assertTrue("Correctly threw ArrayIndexOutOfBoundsException", true);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			fail("This should not have caused an Exception");
		}

		// testing that the array is a ragged array
		try {
			assertEquals(0.0, array[2][2], .001);
			fail("This should have caused a ArrayIndexOutOfBoundsException");

		} catch (ArrayIndexOutOfBoundsException e) {

			assertTrue("Correctly threw ArrayIndexOutOfBoundsException", true);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			fail("This should not have caused an Exception");
		}
	}

}
